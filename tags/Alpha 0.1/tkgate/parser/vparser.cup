package parser;import java.lang.Object;import java.io.*;import java.util.*;import structure.*;import components.*;terminal QUOTE, COL, PP, AT, EQUALS, SEM, DSLASHPP;terminal LBRACK, RBRACK, LSBRACK, RSBRACK, LCBRACK, RCBRACK;terminal Integer INT;terminal String SSTRING;terminal String PUTID;terminal VERSION, PROPERTY, ROOTMODULE, COMMENT, MODULE, ENDMODULE;terminal ENDDECLS, WIRE, SN, W, DP, R, TYPE, ST, DR, DOLINK, LINK, END;terminal USEEXTBARS, DISCARDCHANGES, FRAME, WIDTH, HEIGHT, TEXT, LINE;non terminal final, projet, listing;non terminal modules_list, main_module, module_decl, wires_decl, components_decl;non terminal wire_list, wire, bus, coordinates_decl;non terminal cable_list, cable, coordinate_list, coordinate;non terminal component_def, gate, gate_def, inoutput, put_list, put, liste_option, module; non terminal position, option_list, wires_tab, comment, comment_body, phrase, frame;  /* La grammaire */start with final ;/********* Projet ************/final ::= VERSION QUOTE SSTRING:v_id QUOTE  projet:p  		{: RESULT = (Project) p;                   ((Project)RESULT).setVersion(String.valueOf(v_id));                 :} ;                projet  ::= liste_option:t listing:l {:			  RESULT = (Project) t;                          ((Project)RESULT).setModules((LinkedList<Module>) l);                         :}           |listing:l {: RESULT = new Project();                          ((Project)RESULT).setModules((LinkedList<Module>) l);                      :} ;liste_option ::= PROPERTY USEEXTBARS EQUALS INT:n                  {: RESULT = new Project();                     ((Project) RESULT).setUseExtBars(Integer.valueOf(n)==1); :}                | PROPERTY DISCARDCHANGES EQUALS INT:n                  {: RESULT = new Project();                     ((Project) RESULT).setDiscardChanges(Integer.valueOf(n)==1); :}                |PROPERTY USEEXTBARS EQUALS INT:n1  PROPERTY DISCARDCHANGES EQUALS INT:n2                  {: RESULT = new Project();			    ((Project) RESULT).setUseExtBars(Integer.valueOf(n1)==1);                    ((Project) RESULT).setDiscardChanges(Integer.valueOf(n2)==1); :}                |  PROPERTY DISCARDCHANGES EQUALS INT:n1 PROPERTY USEEXTBARS EQUALS INT:n2                                  {: RESULT = new Project();			    ((Project) RESULT).setUseExtBars(Integer.valueOf(n2)==1);                    ((Project) RESULT).setDiscardChanges(Integer.valueOf(n1)==1); :};listing ::= modules_list:ml {: RESULT = (LinkedList<Module>) ml;				:}            | modules_list:ml1 main_module:mm modules_list:ml2 			{: RESULT = new LinkedList<Module>();                          ((LinkedList<Module>) RESULT).add((Module) mm);                          ((LinkedList<Module>) RESULT).addAll((LinkedList<Module>) ml1);			  ((LinkedList<Module>) RESULT).addAll((LinkedList<Module>) ml2);	                        :}           | modules_list:ml1 main_module:mm  			{: RESULT = new LinkedList<Module>();                           ((LinkedList<Module>) RESULT).add((Module) mm);                           ((LinkedList<Module>) RESULT).addAll((LinkedList<Module>) ml1);	                        :} 	  | main_module:mm modules_list:ml2 			{: RESULT = new LinkedList<Module>();                           ((LinkedList<Module>) RESULT).add((Module) mm);			   ((LinkedList<Module>) RESULT).addAll((LinkedList<Module>) ml2);	                        :} 	  | main_module:mm  			{: RESULT = new LinkedList<Module>();                           ((LinkedList<Module>) RESULT).add((Module) mm);	                        :} ;/******************* Modules ********************/main_module ::= module_decl:name ROOTMODULE                  wires_decl: wd components_decl:cd ENDMODULE               {: RESULT = new Module();                 ((Module) RESULT).setIsMain(true);                ((Module) RESULT).setName((String) name);                ((Module) RESULT).setWires((LinkedHashMap<String,Wire>) wd);                ((Module) RESULT).setComponents((LinkedList<Component>) cd);             :}             ;modules_list ::=  module:m {: RESULT = new LinkedList<Module>();                              ((LinkedList<Module>) RESULT).add((Module) m);                             :}               |module:m modules_list: ml                    {: RESULT = new LinkedList<Module>();                       ((LinkedList<Module>) RESULT).add((Module) m);                        ((LinkedList<Module>) RESULT).addAll((LinkedList<Module>) ml);                     :};/* A affiner, il y a des noms fonctionnels */module ::= MODULE SSTRING:name SEM                   wires_decl: wd components_decl:cd  ENDMODULE             {: RESULT = new Module();                 ((Module) RESULT).setIsMain(false);                ((Module) RESULT).setModuleName((String) name);                ((Module) RESULT).setWires((LinkedHashMap<String,Wire>) wd);                ((Module) RESULT).setComponents((LinkedList<Component>) cd);                System.out.println(RESULT);             :}             ;/* module_decl ::=  MODULE SSTRING:name SEM             {: RESULT = String.valueOf(name);             :};*//*******************  Wires ***********************/wires_decl ::=  wire_list:wl ENDDECLS               {: RESULT= (LinkedHashMap<String,Wire>) wl;                :};/*wire_list ::=	wire:w                 {: RESULT = new LinkedList<Wire>();                    ((LinkedList<Wire>) RESULT).add((Wire) w);		:}               | wire: w wire_list:wl			{: RESULT = new LinkedList<Wire>();                   ((LinkedList<Wire>) RESULT).add((Wire) w);                   ((LinkedList<Wire>) RESULT).addAll ((LinkedList<Wire>) wl);		:};*/wire_list ::=	wire:w                 {: RESULT = new LinkedHashMap<String,Wire>();                    ((LinkedHashMap<String,Wire>) RESULT).put(((Wire) w).getWireName(), (Wire) w);		:}               | wire: w wire_list:wl			{: RESULT = (LinkedHashMap<String,Wire>) wl;                   ((LinkedHashMap<String,Wire>) RESULT).put(((Wire) w).getWireName(), (Wire) w);		:};wire ::= WIRE bus:c SSTRING:name          DSLASHPP          SN INT:sn_value DP INT:dp_value coordinates_decl:cl         {:            RESULT = new Wire();            ((Wire) RESULT).setWireName(String.valueOf(name));            ((Wire) RESULT).setBus((int[]) c);            ((Wire) RESULT).setSn((int) sn_value);            ((Wire) RESULT).setDp((int) dp_value);            ((Wire) RESULT).setCables((LinkedList<Cable>) cl);         :}         | WIRE bus:c SSTRING:name          DSLASHPP          SN INT:sn_value  coordinates_decl:cl         {:            RESULT = new Wire();            ((Wire) RESULT).setWireName(String.valueOf(name));            ((Wire) RESULT).setBus((int[]) c);            ((Wire) RESULT).setDp((int) sn_value);            ((Wire) RESULT).setCables((LinkedList<Cable>) cl);         :}          | WIRE bus:c SSTRING:name          DSLASHPP          DP INT:dp_value coordinates_decl:cl         {:            RESULT = new Wire();            ((Wire) RESULT).setWireName(String.valueOf(name));            ((Wire) RESULT).setBus((int[]) c);            ((Wire) RESULT).setDp((int) dp_value);            ((Wire) RESULT).setCables((LinkedList<Cable>) cl);         :}         |WIRE bus:c SSTRING:name          DSLASHPP          coordinates_decl:cl         {:            RESULT = new Wire();            ((Wire) RESULT).setWireName(String.valueOf(name));            ((Wire) RESULT).setBus((int[]) c);            ((Wire) RESULT).setCables((LinkedList<Cable>) cl);         :};                   // donne le domaine du busbus ::= LSBRACK INT:n1 PP INT:n2 RSBRACK         {: RESULT = new int[2];           ((int[]) RESULT)[0]=(int) n1;           ((int[]) RESULT)[1]=(int) n2;          :};/*************** Cables ****************************/coordinates_decl ::= cable:c            {: RESULT = new LinkedList<Cable>();              ((LinkedList<Cable>) RESULT).add((Cable) c);           :}                   | cable:c cable_list:cl	   {: RESULT = new LinkedList<Cable>();              ((LinkedList<Cable>) RESULT).add((Cable) c);              ((LinkedList<Cable>) RESULT).addAll((LinkedList<Cable>) cl);           :}	;cable_list ::=  DSLASHPP cable:c  		{: RESULT = new LinkedList<Cable>();              	((LinkedList<Cable>) RESULT).add((Cable) c);           	:}              | DSLASHPP cable:c cable_list:cl	   	{: RESULT = new LinkedList<Cable>();              	((LinkedList<Cable>) RESULT).add((Cable) c);              	((LinkedList<Cable>) RESULT).addAll((LinkedList<Cable>) cl);           	:}	 ;cable ::= LCBRACK INT:n1 RCBRACK coordinate_list:l LCBRACK INT:n2 RCBRACK          {: RESULT = new Cable();             ((Cable) RESULT).setId1(Integer.valueOf(n1));             ((Cable) RESULT).setId2(Integer.valueOf(n2));             ((Cable) RESULT).coordinatesToSegments((LinkedList<Coordinate>) l );          :};  coordinate_list ::= coordinate:s                 {: RESULT = new LinkedList<Coordinate>();                 ((LinkedList<Coordinate>) RESULT).add((Coordinate) s); :}                | coordinate:s coordinate_list:sl               {: RESULT = new LinkedList<Coordinate>();                 ((LinkedList<Coordinate>) RESULT).add((Coordinate) s);                  ((LinkedList<Coordinate>) RESULT).addAll((LinkedList<Coordinate>) s);                   :};coordinate ::= LBRACK INT:n1 COL INT:n2 RBRACK              {: RESULT = new Coordinate(n1,n2); :};/************************* Components *****************************/components_decl ::= component_def:c                     {: RESULT = new LinkedList<Component>();	               ((LinkedList<Component>) RESULT).add((Component) c);  :}                   | component_def:c components_decl:cd                        {: RESULT = new LinkedList<Component>();			((LinkedList<Component>) RESULT).add((Component) c);  			((LinkedList<Component>) RESULT).addAll((LinkedList<Component>) cd);:};/* Ajouter encore output, input, supply1, supply0, module_interface */component_def ::= gate:g {: RESULT = (Component) g;:}              | comment:c {: RESULT = (Component) c;:}               | frame:c  {: RESULT = (Component) c;:} ;             gate ::= gate_def:s1 SSTRING:s2 LBRACK inoutput:t RBRACK SEM position:p option_list:c            {: RESULT = (Component) c;               ((Component) RESULT).setType((String) s1);               ((Component) RESULT).setComponentName((String) s2);               ((Component) RESULT).setPosition((Coordinate) c);               ((Component) RESULT).setInoutput((LinkedList<String>) t);             :} ;gate_def::= DSLASHPP SSTRING:s            {: RESULT=String.valueOf(s); :}        | SSTRING:s            {: RESULT=String.valueOf(s); :};inoutput::=     put:w              {: RESULT = new LinkedList<String>();                 ((LinkedList<String>) RESULT).add((String) w);               :}                | put:w COL put_list:wl                {: RESULT = new LinkedList<String>();                 ((LinkedList<String>) RESULT).add((String) w);                  ((LinkedList<String>) RESULT).addAll((LinkedList<String>) wl);                 :} ;put ::= PUTID LBRACK SSTRING:s RBRACK           {: RESULT = (String) s; :};position ::= AT LBRACK INT:n1 COL INT:n2 RBRACK            {: RESULT= new Coordinate(Integer.valueOf(n1), Integer.valueOf(n2));             :}        ;option_list ::= SN INT:n {: RESULT = new Component();                        ((Component) RESULT).setSn(Integer.valueOf(n));                      :}                | SN INT:n option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setSn(Integer.valueOf(n));                  :}               | R INT:n {: RESULT = new Component();                        ((Component) RESULT).setR(Integer.valueOf(n));                      :}                  | R INT:n option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setR(Integer.valueOf(n));                  :}                | W LSBRACK wires_tab:t RSBRACK {: RESULT = new Component();                        ((Component) RESULT).setW((ArrayList<Integer>) t);                      :}                  | W LSBRACK wires_tab:t RSBRACK option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setW((ArrayList<Integer>) t);                  :}                | TYPE INT:n {: RESULT = new Component();                        ((Component) RESULT).setIntType(Integer.valueOf(n));                      :}                  | TYPE INT:n option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setIntType(Integer.valueOf(n));                  :}                | ST INT:n {: RESULT = new Component();                        ((Component) RESULT).setSt(Integer.valueOf(n));                      :}                  | ST INT:n option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setSt(Integer.valueOf(n));                  :}                | DR INT:n {: RESULT = new Component();                        ((Component) RESULT).setDr(Integer.valueOf(n));                      :}                  | DR INT:n option_list:c                  {: RESULT = (Component) c;                     ((Component) RESULT).setDr(Integer.valueOf(n));                  :};wires_tab ::=   INT: n {: RESULT = new ArrayList<Integer>();                        ((ArrayList<Integer>) RESULT).add(Integer.valueOf(n));   :}               | INT:n COL wires_tab:t                        {: RESULT = new ArrayList<Integer>();                        ((ArrayList<Integer>) RESULT).add(Integer.valueOf(n));                           ((ArrayList<Integer>) RESULT).addAll((ArrayList<Integer>) t); :} ;comment ::= COMMENT SSTRING:s1 DOLINK INT:n1 LINK SSTRING:s2 position:c SN INT:n2 comment_body:s DSLASHPP END           {: RESULT = new Component();               ((Component) RESULT).setType("comment");               ((Component) RESULT).setComponentName(String.valueOf(s1));               ((Component) RESULT).setSn(Integer.valueOf(n1));               ((Component) RESULT).setPosition((Coordinate) c);               ((Component) RESULT).setDoLink(Integer.valueOf(n1));               ((Component) RESULT).setLink(String.valueOf(s2));               ((Component) RESULT).setCommentBody(String.valueOf(s));             :};comment_body ::= LINE phrase:s comment_body:cb 	     	 {: RESULT = new String();    		    ((String) RESULT).concat(String.valueOf(s) + "\n" + String.valueOf(cb)); :}                |  LINE phrase:s {: RESULT = String.valueOf(s); :};phrase ::= SSTRING: s {: RESULT = String.valueOf(s); :}          | SSTRING:s phrase:p 	    	      {: RESULT = new String(); 		      	((String) RESULT).concat(String.valueOf(s) + " " + String.valueOf(p));:} ;            frame ::=  DSLASHPP FRAME SSTRING:s1 position:c SN INT:sn WIDTH INT:width HEIGHT INT:height TEXT SSTRING:s2           {: RESULT = new Component();              ((Component) RESULT).setType("frame");              ((Component) RESULT).setComponentName(String.valueOf(s1));              ((Component) RESULT).setSn(Integer.valueOf(sn));              ((Component) RESULT).setPosition((Coordinate) c);              ((Component) RESULT).setWidth(Integer.valueOf(width));              ((Component) RESULT).setHeight(Integer.valueOf(height));              ((Component) RESULT).setText(String.valueOf(s2));             :};